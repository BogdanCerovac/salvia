import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { PageReport, SalviaCreateTest } from '../../../types/SalviaTest'
import { UserInfo } from '../../../types/SalviaUser'
import { RootState } from '../../store'
import { saveSalviaTestCase } from './salviaAPI'
import { v4 as uuidv4 } from 'uuid'
import { storeQualwebReport } from '../report/reportAPI'
import { map, omit } from 'rambda'

export interface CreateTestState {
  test: string
  status: 'idle' | 'loading' | 'ready'
  response: 'ok' | 'failed' | undefined
}

const initialState: CreateTestState = {
  test: '',
  status: 'idle',
  response: undefined,
}

export const createTest = createAsyncThunk(
  'test/createTest',
  async ({ test, userInfo }: { test: SalviaCreateTest; userInfo: UserInfo | undefined }) => {
    const id = uuidv4()

    const storeResponse = await storeQualwebReport(id, test.report)

    //modify report to contain only page stats
    const pageReport: Record<string, PageReport> = map((item) => omit('modules', item), test.report)

    await saveSalviaTestCase(
      test.domain,
      storeResponse.id,
      pageReport,
      test.viewport,
      userInfo,
    )

    return storeResponse.id
  },
)

export const testSlice = createSlice({
  name: 'test',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //reset state to initial state
    resetTest: (state) => {
      state.status = 'idle'
      state.test = ''
      state.response = undefined
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createTest.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(createTest.fulfilled, (state, action) => {
        state.status = 'ready'
        state.test = action.payload
        state.response = 'ok'
      })
      .addCase(createTest.rejected, (state) => {
        state.status = 'ready'
        state.response = 'failed'
      })
  },
})

export const { resetTest } = testSlice.actions

export const selectResponse = (state: RootState) => state.test.response
export const selectStatus = (state: RootState) => state.test.status

export const selectTest = (state: RootState) => state.test.test

export default testSlice.reducer
